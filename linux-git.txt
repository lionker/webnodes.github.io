1 : git clone .....

2 : 进人index层文件夹 cd xxx

3 : 将需要上传的文件复制进入

4 :  全部上传  git add . (git add all)

5 :  提交 git commit -m blog

6 :  提交到主分支 git pull origin master 

7 : 提交到主分支 git push origin master  


##vim编辑器
	:w filename  命令文件
	:wq 保存退出
	i 插入
##终端在复制终端外代码时,回因编码不同而导致命令错误
##linux命令
	echo 控制台打印 (相当于console.log)
	find 文件夹    平铺查看文件夹下信息,能展示后代(比dir强大)
	find 文件夹 -type f 直线   平铺查看文件夹下信息,只展示文件
	ll: 列出对应目录下的所有子目录信息(比dir强大) 
	dir: 列出所有子目录名字
	cat 文件url 获取文件的内容
	mv newName oldName 重命名文件;
	stat 文件 查看文件创建时间  
##git底层命令
    echo "text content" | git hash object -w --stdin
	
	git 
	git hash object -w 文件路径  往git库储存数据(hash键值对的形式)
	git hash object 文件路径   读取文件的hash值
	git cat-file -t   显示对象的类型
	git cat-file -p hash值   格式化的查看,根据对象的类型，以优雅的方式显式对象内容。
##git高级命令

###基本命令
	clear 清屏    (linux命令)
	git init  初始化本地仓库
	git diff  查看为暂存已跟踪文件当前操作更新与未更新的内容
	git	diff --staged  查看已缓存为提交的内容  (dit diff --cached);
	git rm filename 删除文件 (不会新增git对象,会生成tree,commit);
	git config -e 修改用户配置文件
	git rebase -i "hashcode" 编辑commit库,可能会程讯依赖错误导致报错

###	提交 
	git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。	
	git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）
	git add -A ：是上面两个功能的合集（git add --all的缩写）
	git commit -m ""  由暂存区提交至本地库,会生成tree,commit的hashcode;
	git commit -am ""  已跟踪过的文件直接提交
	git commit -a -m "" 已跟踪过的文件直接提交
### 临时存储
	git stash  临时提交虚拟库
	git stash list    查看临时库文件
	git stash apply		返回文件到本地
###查看提交
	git show hashcode  查看blob对象的内容
	git log --oneline 查看几次提交(不显示撤销) ===git log --pretty=oneline
	git log --pretty   查看有效提交的 作者 日期 commit
	git reflog 查看所有提交(包括重置提交前(commit)
	git log --oneline --decorate 	查看当前分支所指对象
	git log --oneline --decorate --graph      --graph选项绘制一个ASCII图像来展示当前分支提交历史的分支结构
	git log --oneline --decorate --graph --all 	查看项目所有分叉历史
	git log --no-merges  查看未提交
	git log --merges 查看 合并
	git is-files -s 查看提交tree的内容(查看暂存区当前的样子)
	git reflog show --date=iso master 查看master分支每次提交时间
###git 撤销
	git checkout filename  工作目录放弃单个文件的修改,未加暂存区 (不可逆)
	git checkout . 放弃当前目录下的修改  (不可逆)
	
	git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了(将暂存区撤回工作区) 
	git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了
	git checkout commit -- filename 可撤回暂存区和工作目录
	git commit --amend -m "xxx" 覆盖之前操作的m (会生成新的tree)
###git 上传
	git push origin  上面命令表示，将当前分支推送到origin主机的对应分支
	git push -u origin master  将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了
	git push origin 本地分支名/远程分支名 若远程分支没有该远程分支,则会在github中新建
###git 分支
	git checkout 分支名 切换分支    
	git branch 分支名  创建分支(在当前head处创建分支)
	git branch -f newBr  新建分支并覆盖同名分支
	git checkout -b dev  hashcode //相当于以上两条命令：在hashcode创建 dev 分支并切换至hashcode处的dev分支
	checkout -B newBr2    新建分支并覆盖同名分支,并切换分支
	git branch -d <name> 删除分支
	git merge <name> 合并某分支到当前分支
	git branch -a  查看所有分支,包括远程
	git brach -vv 查看跟踪分支
	git branch -r  查看远程版本库分支列表
	git branch -m oldName newName 给分支重命名
	git push origin --delete brh 删除远程分支
	git remote show origin 查看remote地址，远程分支，还有本地分支与之相对应关系等信息
	git branch name hash值  在某个hash上创建分支 
	git branch --merged 查看已合并分支
###git 标签  
	git tag tagContent hashcode  给hashcode打上标签tagContent
	git tag annotatedTag e577355 -a -m "蚂蚁部落" 给某个commit打上有批注的标签
	git tag -d tagLearn 删除本地标签
	git push origin --delete tagLearn 删除远程分支标签
###git 指针
    git reset --soft HEAD~	分支和指针回到上一次提交  但不重置已提交的
###git 远程
	git push -f origin 强行推送更新远程库
	git pull origin master --allow-unrelated-histories 强行拉取合并
	git remote add origin https/ssh 建立远程库连接
	git remote remove <name>  删除远程库连接
	git remote set-url origin <newurl> 重新设置远程库连接(也可以直接修改config文件)
##git 储存
	git stash 
	git stash apply --index
	git stash list
	git stash branch testchanges